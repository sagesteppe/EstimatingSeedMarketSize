#plot first kernel density plot
kd1 <- density(data1, n = 1000)
plot(kd1)
probs <- scales::rescale(kd1$y,  to = c(0, 1))
probs <- probs * (1/sum(probs))
r <- sample(1:1000, prob = probs, replace = TRUE)
hist(r)
plot(kd1)
hist(r)
#create datasets
data1 <- c(3, 3, 4, 4, 5, 6, 7, 7, 7, 8, 12, 13, 14, 17, 19, 19)
# use default settings to generate the kernel density plot
# not too many n are needed, because our data going in are relatively coarse.
kd1 <- density(data1, n = 1000)
plot(kd1)
# now we want to transform these values into sampling probabilities so that we
# can use them for drawing values from the distribution.
probs <- scales::rescale(kd1$y,  to = c(0, 1))
probs <- probs * (1/sum(probs))
# now we can compare the drawn values as a histogram to the more accurate and realistic
# distribution from the KDE.
r <- sample(1:1000, prob = probs, replace = TRUE)
hist(r)
plot(kd1)
r
#create datasets
data <- c(3, 3, 4, 4, 5, 6, 7, 7, 7, 8, 12, 13, 14, 17, 19, 19)
# use default settings to generate the kernel density plot
# not too many n are needed, because our data going in are relatively coarse.
kd1 <- density(data1, n = 1000)
plot(kd1)
# now we want to transform these values into sampling probabilities so that we
# can use them for drawing values from the distribution.
probs <- scales::rescale(kd1$y,  to = c(0, 1))
sample_wts <- probs * (1/sum(probs))
# now we can compare the drawn values as a histogram to the more accurate and realistic
# distribution from the KDE.
r <- sample(1:1000, prob = sample_wts, replace = TRUE)
hist(r)
plot(kd1)
#create datasets
data <- c(3, 3, 4, 4, 5, 6, 7, 7, 7, 8, 12, 13, 14, 17, 19, 19)
# use default settings to generate the kernel density plot
# not too many n are needed, because our data going in are relatively coarse.
kd <- density(data1, n = 1000)
plot(kd)
# now we want to transform these values into sampling probabilities so that we
# can use them for drawing values from the distribution.
probs <- scales::rescale(kd$y,  to = c(0, 1))
sample_wts <- probs * (1/sum(probs))
# now we can compare the drawn values as a histogram to the more accurate and realistic
# distribution from the KDE.
r <- sample(1:1000, prob = sample_wts, replace = TRUE)
hist(r)
plot(kd1)
rm(probs, kd)
#create datasets
data <- c(3, 3, 4, 4, 5, 6, 7, 7, 7, 8, 12, 13, 14, 17, 19, 19)
# use default settings to generate the kernel density plot
# not too many n are needed, because our data going in are relatively coarse.
kd <- density(data1, n = 1000)
#create datasets
data <- c(3, 3, 4, 4, 5, 6, 7, 7, 7, 8, 12, 13, 14, 17, 19, 19)
# use default settings to generate the kernel density plot
# not too many n are needed, because our data going in are relatively coarse.
kd <- density(data1, n = 1000)
#create datasets
data <- c(3, 3, 4, 4, 5, 6, 7, 7, 7, 8, 12, 13, 14, 17, 19, 19)
# use default settings to generate the kernel density plot
# not too many n are needed, because our data going in are relatively coarse.
kd <- density(data, n = 1000)
plot(kd)
# now we want to transform these values into sampling probabilities so that we
# can use them for drawing values from the distribution.
probs <- scales::rescale(kd$y,  to = c(0, 1))
sample_wts <- probs * (1/sum(probs))
# now we can compare the drawn values as a histogram to the more accurate and realistic
# distribution from the KDE.
samples <- sample(1:1000, prob = sample_wts, replace = TRUE)
hist(r)
hist(samples)
plot(kd)
#create datasets
data <- c(3, 3, 4, 4, 5, 6, 7, 7, 7, 8, 12, 13, 14, 17, 19, 19)
# use default settings to generate the kernel density plot
# not too many n are needed, because our data going in are relatively coarse.
kd <- density(data, n = 1000)
plot(kd)
# now we want to transform these values into sampling probabilities so that we
# can use them for drawing values from the distribution.
probs <- scales::rescale(kd$y,  to = c(0, 1))
sample_wts <- probs * (1/sum(probs))
# now we can compare the drawn values as a histogram to the more accurate and realistic
# distribution from the KDE.
samples <- sample(1:1000, prob = sample_wts, replace = TRUE)
hist(samples)
plot(kd)
rm(probs, kd, sample_wts)
#create datasets
x <- c(3, 3, 4, 4, 5, 6, 7, 7, 7, 8, 12, 13, 14, 17, 19, 19)
# use default settings to generate the kernel density plot
# not too many n are needed, because our data going in are relatively coarse.
kd <- density(x, n = 1000)
plot(kd)
# now we want to transform these values into sampling probabilities so that we
# can use them for drawing values from the distribution.
probs <- scales::rescale(kd$y,  to = c(0, 1))
sample_wts <- probs * (1/sum(probs))
# now we can compare the drawn values as a histogram to the more accurate and realistic
# distribution from the KDE.
samples <- sample(1:1000, prob = sample_wts, replace = TRUE)
hist(samples)
plot(kd)
rm(probs, kd, sample_wts)
hist(samples)
4/800000
4/80
800000/4
#create datasets
x <- c(3, 3, 4, 4, 5, 6, 7, 7, 7, 8, 12, 13, 14, 17, 19, 19)
# use default settings to generate the kernel density plot
# not too many n are needed, because our data going in are relatively coarse.
kd <- density(x, n = 1000)
plot(kd)
# now we want to transform these values into sampling probabilities so that we
# can use them for drawing values from the distribution.
probs <- scales::rescale(kd$y,  to = c(0, 1))
sample_wts <- probs * (1/sum(probs))
# now we can compare the drawn values as a histogram to the more accurate and realistic
# distribution from the KDE.
samples <- sample(1:1000, prob = sample_wts, replace = TRUE)
hist(samples)
plot(kd)
rm(probs, kd, sample_wts)
setwd('~/Documents/assoRted/EstimatingSeedMarketSize/scripts')
library(terra)
p2dat <- '../data/geospatial/AnnualDisturbance'
f <- 'LF2015_Dist_200_CONUS_20220811/LF2015_Dist_200_CONUS/Tif/LC15_Dist_200.tif'
r <- rast(file.path(p2dat, f))
plot(r)
crs(r)
is.empty(r)
?rast
p2dat <- '../data/geospatial/AnnualDisturbance/'
f <- 'LF2015_Dist_200_CONUS_20220811/LF2015_Dist_200_CONUS/Tif/LC15_Dist_200.tif'
r <- rast(file.path(p2dat, f))
library(terra)
p2dat <- '../data/geospatial/AnnualDisturbance/'
f <- 'LF2015_Dist_200_CONUS_20220811/LF2015_Dist_200_CONUS/Tif/LC15_Dist_200.tif'
r <- rast(file.path(p2dat, f))
r
r <- sprc(file.path(p2dat, f))
r <- c(file.path(p2dat, f))
r
r <- rast(file.path(p2dat, f))
r[1]
r[2]
r[[2]]
View(r)
r[2]
plot(r)
layers(r)
dims(r)
dim(r)
min(r)
str(r)
r
activeCat(r) <- 2
plot(r)
plot(r)
setwd('~/Documents/assoRted/EstimatingSeedMarketSize/scripts')
'../data/geospatial/WildfireProbability'
p2prob <- '../data/geospatial/WildfireProbability'
list.files(p2prob)
list.files(p2prob, pattern = 'png')
list.files(p2prob, pattern = 'png$')
f <- list.files(p2prob, pattern = 'png$')
library(terra)
p2prob <- '../data/geospatial/WildfireProbability'
f <- list.files(p2prob, pattern = 'png$')
terra:rast( file.path(p2prob, f[1]))
library(terra)
terra::rast( file.path(p2prob, f[1]))
p2prob <- file.path('..', 'data', 'geospatial', 'WildfireProbability')
f <- list.files(p2prob, pattern = 'png$')
terra::rast( file.path(p2prob, f[1]))
lyrs <- terra::rast( file.path(p2prob, f[1]))
r <- terra::rast( file.path(p2prob, f[1]))
str(r)
names(r)
plot(r)
crs(r)
crs(r) <- "epsg:102007"
crs(r) <- "EPSG:102007"
crs("epsg:102007", describe=TRUE)
crs("epsg:102007", describe=TRUE)
crs(r) <- "EPSG:102008"
extent(r)
ext(r)
terra::describe(file.path(p2prob, f[1]))
terra::set.ext(
x = r,
value = c(-375405,
236415,
650085,
1028355)
)
r <- terra::set.ext(
x = r,
value = c(-375405,
236415,
650085,
1028355)
)
ext(r)
terra::set.ext
set.ext
p2prob <- file.path('..', 'data', 'geospatial', 'WildfireProbability')
f <- list.files(p2prob, pattern = 'png$')
r <- terra::rast( file.path(p2prob, f[1]))
terra::describe(file.path(p2prob, f[1]))
r <- terra::set.ext(
x = r,
value = c(-375405,
236415,
650085,
1028355)
)
r1 <- terra::set.ext(
x = r,
value = c(-375405,
236415,
650085,
1028355)
)
setwd('~/Documents/assoRted/EstimatingSeedMarketSize/scripts')
# These data come in a variety of formats which are not optimized for spatial analysis, but which serve
# as decent means of transmitting the data. We will convert them into analysis ready file formats here
# so that data transformations do not obfusciate the analytical operations in the reporting markdown file.
library(terra)
### Probabilistic Wildfire Information ###
p2prob <- file.path('..', 'data', 'geospatial', 'WildfireProbability')
f <- list.files(p2prob, pattern = 'png$')
r <- terra::rast( file.path(p2prob, f[1]))
# terra will emit a warning that the raster has an unknown extent.
# fortunately their are metadata for the file available at
# https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP2_HI/ImageServer
# which describe the extent, which should allow us to match it up perfectly to the domain!
#
# Extent:
#   XMin: -375405
#   YMin: 650085
#   XMax: 236415
#   YMax: 1028355
#   Spatial Reference: 102007  (102007)
# note that their spatial reference is an EPSG code which points to
# https://epsg.io/102007 which is made for Hawaii...
# However, 10200*8* is a CONUS albers projection... Much more likely this is what they
# meant
r1 <- terra::set.ext(
x = r,
value = c(-375405,
236415,
650085,
1028355)
)
url <- https://machine.domain.com/webadaptor/rest/services/World/MODIS/ImageServer/exportImage?f=image&imageSR=5070&bboxSR=4326&size=10000,10000
url <- "https://machine.domain.com/webadaptor/rest/services/World/MODIS/ImageServer/exportImage?f=image&imageSR=5070&bboxSR=4326&size=10000,10000"
url <- "https://machine.domain.com/webadaptor/rest/services/World/MODIS/ImageServer/exportImage?f=image&imageSR=5070&bboxSR=4326&size=10000,10000&format=tiff"
install.packages("arcgis")
devtools::install_github(("r-arcgis/arcgis"))
pak::pak("r-arcgis/arcgis")
install.packages('pak')
pak::pak("r-arcgis/arcgis")
install.packages('r-arcgis/arcgisplaces')
install.packages('r-arcgis/arcgisplaces')
install.packages('R-ArcGIS/arcgisplaces')
pak::pak("r-arcgis/arcgisplaces")
pak::pak("r-arcgis/arcgisplaces")
pak::pak("r-arcgis/arcgisplaces")
install.packages('r-arcgis/arcgisplaces')
install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
res <- GET(url)
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer'
res <- GET(url)
res
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?f=image&imageSR=5070&bboxSR=4326&size=10000,10000&format=tiff'
res <- GET(url)
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer&format=tiff'
res <- GET(url)
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK'
res <- GET(url)
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer'
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer'
res <- GET(url)
head(res)
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?f'
res <- GET(url)
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage'
res <- GET(url)
res
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?f=image&'
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?f=image'
res <- GET(url)
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?f=image&imageSR=3857'
res <- GET(url)
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage
# the above works to get a response
res <- GET(url)
res
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage'
res <- GET(url)
res
url <- 'https://machine.domain.com/webadaptor/rest/services/World/MODIS/ImageServer/exportImage?f=json&bbox=-141.19530416221985,-62.217823180545146,139.27427961579508,84.15317625109763&imageSR=3857&bboxSR=4326&size=937,489'
GET(url)
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?f=image'
GET(url)
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?f=image&size=937,489'
GET(url)
url <- "https://machine.domain.com/webadaptor/rest/services/World/MODIS/ImageServer/exportImage?f=image&imageSR=5070&bboxSR=4326&size=400,400&format=tiff"
res <- GET(url)
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage&format=tiff'
res <- GET(url)
res
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage&format=tiff&size=400,400'
res <- GET(url)
res
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage&format=tiff&size=800,800'
res <- GET(url)
res
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage&format=tiff&size=800,800'
res <- GET(url)
res
content(res)
stuff <- content(res)
View(stuff)
View(stuff)
xml_child(stuff, 1)
xml_child(stuff, 2)
?xml_child
install.packages('xml2')
stuff
stuff <- content(res, 'png')
library(httr)
library(jsonlite)
stuff <- content(res, 'png')
stuff <- content(res, png::readPNG())
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=tiff&size=800,800'
res <- GET(url)
stuff <- content(res, png::readPNG())
stuff
stuff <- content(res)
stuff
View(stuff)
stuff
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=tiff&size=800,800'
res <- GET(url)
stuff <- content(res)
stuff
View(stuff)
xml_child(stuff, 2)
library(xml2)
xml_child(stuff, 1)
xml_child(stuff, 2)
bbox="-167.724033,65.647121,65.872086,-166.926151"
paste(bbox, bboxSR, size, imageSR, sep = '&')
bbox="bbox=-167.724033,65.647121,65.872086,-166.926151"
bboxSR="bboxSR=4326"
size="size=800,800"
imageSR='imageSR=5070'
paste(bbox, bboxSR, size, imageSR, sep = '&')
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=tiff'
res <- GET(url)
stuff <- content(res)
stuff
str(stuff)
View(stuff)
paste0(url, '&', paste(bbox, bboxSR, size, imageSR, sep = '&'))
GET(paste0(url, '&', paste(bbox, bboxSR, size, imageSR, sep = '&')))
res <- GET(paste0(url, '&', paste(bbox, bboxSR, size, imageSR, sep = '&')))
View(res)
content(res)
View(res)
res[["content"]]
res <- GET(paste0(url, '&', paste(bbox, bboxSR,imageSR, sep = '&')))
content(res)
res
content(res)
View(res)
res[["content"]]
r2 <- rawtoChar(r1$content)
r2 <- rawtoChar(res$content)
?rawtoChar
??rawtoChar
r2 <- rawtoChar(res$content)
r2 <- charToRaw(res$content)
res$content
800*800
View(res)
res[["content"]]
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=png'
res <- GET(paste0(url, '&', paste(bbox, bboxSR,imageSR, sep = '&')))
res$content
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
res$content
res
res$content
View(res)
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
res$content
content(res)
rlogo <- content(GET("https://httpbin.org/image/png"))
rlogo
plot(0:1, 0:1, type = "n")
plot(0:1, 0:1, type = "n")
rasterImage(rlogo, 0, 0, 1, 1)
rlogo
content(res)
View(res)
res[["url"]]
rasterImage(res)
rasterImage(res$content)
rasterImage(res$content, 0, 0, 1, 1)
rlogo
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=png'
res <- GET(url)
stuff <- content(res)
stuff
View(stuff)
stuff
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
content(res)
content(res)
View(res)
stuff <- content(res)
View(stuff)
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
content(res)
View(res)
terra::raster(res$content)
terra::rast(res$content)
parse_json(stuff)
fromJSON(res)
fromJSON(content(res))
fromJSON(content(res))
content(res)
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
content(res)
View(res)
res[["url"]]
download.file(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
download.file(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')), destfile = 'bleh')
paste(bbox, bboxSR, size, sep = '&')
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=png'
download.file(paste0(url, '&', paste(bbox, bboxSR, size, sep = '&')), destfile = 'bleh')
getURL(paste0(url, '&', paste(bbox, bboxSR, size, sep = '&')))
?getURL
??getURL
RCurl::getURL(paste0(url, '&', paste(bbox, bboxSR, size, sep = '&')))
RCurl::getURL(paste0(url, '&', paste(bbox, bboxSR, size, sep = '&')))
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=png'
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
content(res)
fromJSON(content(res))
View(res)
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=png'
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
content(res)
terra::rast(res)
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
bbox="bbox=-167.724033,65.647121,65.872086,-166.926151"
bboxSR="bboxSR=4326"
size="size=800,800"
imageSR='imageSR=5070'
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=png'
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
terra::rast(res)
content(res)
res <- content(res)
terra::rast(res)
res
View(res)
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
View(res)
res[["url"]]
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=tiff'
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=tiff'
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
res <- content(res)
View(res)
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=tiff'
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
View(res)
res[["url"]]
imageSR='imageSR=100208'
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=tiff'
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
res <- content(res)
View(res)
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
View(res)
res$url
bbox="bbox=-167.724033,65.647121,65.872086,-166.926151"
bboxSR="bboxSR=4326"
size="size=800,800"
imageSR='imageSR=102006'
url <- 'https://apps.fs.usda.gov/fsgisx01/rest/services/RDW_Wildfire/RMRS_ProbabilisticWildfireRisk_FLP1_AK/ImageServer/exportImage?format=tiff'
res <- GET(paste0(url, '&', paste(bbox, bboxSR, imageSR, size, sep = '&')))
res$url
