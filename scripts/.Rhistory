'longevity_days' = as.integer(), # User converts input reported data to number of days
'prop_viable' = as.double(), # the proportion viable reported as: 0.77
'longevity_resolution' = as.integer(), # the resolution of measurements in day, if measured every 6 months, ~182
'temperature' = as.integer(),  # the temperature in Celsius to the closest whole number.
'relative_humidity' = as.double(), # the relative humidity as a proportion: 0.2
'data_source' = as.character(), # the source for data, if recent publication DOI preferred, else Lead author year (minimum)
'method' = as.character(), # method of measuring viability
'comment' = as.character() # any analyst comments on the data set.
)
species_PLS <- data.frame(
'PLANTS_code' = as.character(), # the current USDA Plants code - can be updated in overhauls.
'PLS_per_lb' = as.character(), # the number of seeds per lb
'PLS_per_lb_source' =  as.character(), # the source for data, if recent publication DOI preferred, else Lead author year (minimum)
'PLS_per_lb_source_method' =  as.character(), # method, assumed 'weighed'
'PLS_per_lb_source_comment' =  as.character() # any comments on method
)
species_taxonomy <- data.frame(
'PLANTS_code' = as.character(), # the current USDA Plants code - can be updated in overhauls.
'PLANTS_name' = as.character(), # currently accepted USDA plants name  - can be updated in overhauls.
# note genus and family not provided for PLANTS, because of reluctance to fully embrace a phylogenetic perspective.
'POW_name' = as.character(), # currently accepted Plants of the World plants name  - can be updated in overhauls.
'POW_genus' = as.character(), # currently accepted Plants of the World plants name  - can be updated in overhauls.
'POW_family' = as.character(), # currently accepted Plants of the World plants name  - can be updated in overhauls.
'year_populated' = as.numeric(), # the year these values were acquired
'month_populated' = as.numeric() # the number month of the year these values were acquired.
)
administration <- data.frame(
'region_agency' = as.integer(),
'agency' = as.character(),
'DOI_region' = as.integer(), # the DOI region of analysis, as it's number
'NLCD_no' = as.integer(), # the NLCD number for the cover type
'agency_name' = as.character(), # the land management agency.
'agency_area' = as.character() # the particular agencies surface administrative area
)
cover_class <- data.frame(
'NLCD_no' = as.integer(),  # JOIN KEY
'year' = as.integer(), # the year of the measurements
'area' = as.numeric(), # the total area of the cover class on agencies land, in acres
'slope_greater_10' = as.numeric(), # total area of CC on agencies land, where slope >= 10* in acres,
'slope_less_10' = as.numeric(),  # total area of CC on agencies land, where slope < 10* in acres,
'area_burned' = as.numeric(),  # the total area of the cover class on agencies land, in acres which burned.
'slope_greater_10_burned' = as.numeric(), # total area of CC on agencies land, where slope >= 10* in acres which burned.
'slope_less_10_burned' = as.numeric()  # total area of CC on agencies land, where slope < 10* in acres which burned.
)
# this table showcases the estimated ACTUAL treatment rates applied by a practitioner over a time range
restoration_realized <- data.frame(
'NLCD_no' = as.integer(),  # JOIN KEY
'year_end' = as.integer(), # when the practitioner started doing treatments
'year_start' = as.integer(), # when the practitioner stopped doing treatments / survey year
'method' = as.character(), # method one of "Drill", "Aerial", "Broadcast", "Hydro"
'PLS_per_acre' = as.numeric(), # PLS per acre applied
'PLS_per_m2'= as.numeric() # PLS per m2 applied
)
# this table showcases what a practitioner would require to meet land health standards or management objectives.
restoration_needed <- data.frame(
'NLCD_no' = as.integer(),  # JOIN KEY
'method' = as.character(), # method one of "Drill", "Aerial", "Broadcast", "Hydro"
'PLS_per_acre' = as.numeric(), # PLS per acre which would need to be applied to achieve goals
'PLS_per_m2'= as.numeric() # PLS per m2 which would need to be applied to achieve goals
)
species_seedmix_realized <- data.frame(
'NLCD_no' = as.integer(), # JOIN KEY
'PLANTS_code' = as.character(), # JOIN KEY
'pct_in_mix_avg' = as.integer(), # When used, on average, how much of a seed mix contains this species?
'pct_in_mix_min' = as.integer(), # When used, what's the smallest amount, of this a seed mix contains?
'pct_in_mix_max' = as.integer(), # When used, what's the largest amount, of this a seed mix contains?
'pct_area_treated' = as.integer() # what proportion of area get's treated by this species?
)
species_seedmix_needed <- data.frame(
'NLCD_no' = as.integer(), # JOIN KEY
'PLANTS_code' = as.character(), # JOIN KEY
'pct_in_mix_avg' = as.integer(), # Ideally, on average, how much of a seed mix contains this species?
'pct_in_mix_min' = as.integer(), # Ideally, what's the smallest amount, of this a seed mix contains?
'pct_in_mix_max' = as.integer(), # Ideally, what's the largest amount, of this a seed mix contains?
'pct_area_treated' = as.integer() # Ideally what proportion of area get's treated by this species?
)
lifeform_realized <- data.frame(
'NLCD_no' = as.integer(), # JOIN KEY
'pct_graminoid_avg' = as.integer(), # When used, on average, how much of a seed mix contains this lifeform?
'pct_forb_avg' = as.integer(),
'pct_shrub_avg' = as.integer(),
'pct_tree_avg' = as.integer(),
'pct_graminoid_min' = as.integer(), # When used, on average, what's the minimum amount of a seed mix contains this lifeform?
'pct_forb_min' = as.integer(),
'pct_shrub_min' = as.integer(),
'pct_tree_min' = as.integer(),
'pct_graminoid_max' = as.integer(),  # When used, on average, what's the maximum amount of a seed mix contains this lifeform?
'pct_forb_max' = as.integer(),
'pct_shrub_max' = as.integer(),
'pct_tree_max' = as.integer()
)
lifeform_needed <- data.frame(
'NLCD_no' = as.integer(),
'pct_graminoid_avg' = as.integer(),
'pct_forb_avg' = as.integer(),
'pct_shrub_avg' = as.integer(),
'pct_tree_avg' = as.integer(),
'pct_graminoid_min' = as.integer(),
'pct_forb_min' = as.integer(),
'pct_shrub_min' = as.integer(),
'pct_tree_min' = as.integer(),
'pct_graminoid_max' = as.integer(),
'pct_forb_max' = as.integer(),
'pct_shrub_max' = as.integer(),
'pct_tree_max' = as.integer()
)
respondent <- data.frame(
'RespondentID' = as.numeric(), # unique identifier for each respondent - job combination.
'region_agency' = as.numeric(), # combined internally
'agency' = as.character(),  # agency abbreviation
'DOI_region' = as.integer(), # DOI region
'name_first' = as.character(), # respondents first name
'name_last' = as.character(), # last name
'office' = as.character(), # office name
'email'= as.character(),  # email for contact/clarification
'position_start' = as.integer(),  # when they started the position they will be reporting for
'position_end' = as.integer() # optionally the year they left, especially if filling out info based on a previous job.
)
library(dm)
all_tables <- Filter(function(x) is(x, "data.frame"), mget(ls()))
short_items <- c(
'respondent', 'administration', 'cover_class', 'restoration_needed', 'restoration_realized',
'lifeform_needed', 'lifeform_realized')
short_term <- all_tables[short_items]
med_items <- c(
'respondent', 'administration', 'cover_class', 'restoration_needed', 'restoration_realized',
'species_seedmix_needed', 'species_seedmix_realized', 'species_PLS')
medium_term <- all_tables[med_items]
rm(list=setdiff(ls(), c("short_term", 'medium_term')))
short_term_dm <- as_dm(short_term)
short_term_dm <- short_term_dm %>%
dm_add_pk(respondent, RespondentID) %>%
dm_add_pk(administration, region_agency) %>%
dm_add_pk(cover_class, NLCD_no) %>%
dm_add_pk(restoration_realized, NLCD_no) %>%
dm_add_pk(restoration_needed, NLCD_no) %>%
dm_add_fk(
table = respondent, columns = RespondentID, ref_table = administration) %>%
dm_add_fk(
table = administration, columns = region_agency, ref_table = cover_class) %>%
dm_add_fk(
table = cover_class, columns = NLCD_no, ref_table = restoration_realized) %>%
dm_add_fk(
table = cover_class, columns = NLCD_no, ref_table = restoration_needed) %>%
# just short term stuff below
dm_add_pk(lifeform_realized, NLCD_no) %>%
dm_add_pk(lifeform_needed, NLCD_no) %>%
dm_add_fk(
table = restoration_realized, columns = NLCD_no, ref_table = lifeform_realized) %>%
dm_add_fk(
table = restoration_needed, columns = NLCD_no, ref_table = lifeform_needed)
cols <- setNames(
names(short_term), c('#755C1B', '#83BCA9', '#F76F8E', rep('#5E5C6C',2), rep('#0B5563', 2))
)
par(bg = 'red')
typeof(sh_dm_plot)
sh_dm_plot <- short_term_dm %>%
dm_set_colors(!!!cols) %>%
dm_draw(rankdir = "LR", view_type = "all", columnArrows = FALSE)
htmltools::html_print(
html = sh_dm_plot,
background = "transparent",
viewer = '../PitchTalk/images/ShortTermERD.html')
?dm_draw()
?DiagrammeRsvg
?export_svg
??export_svg
DiagrammeRsvg::export_svg(sh_dm_plot)
sh_dm_plot
DiagrammeRsvg::export_svg(sh_dm_plot)
svg <- DiagrammeRsvg::export_svg(sh_dm_plot)
svg
html_tools::html_print(HTML(svg))
htmltools::html_print(HTML(svg))
htmltools::html_print(htmltools::HTML(svg))
htmltools::html_print(background = "transparent")
svg <- DiagrammeRsvg::export_svg(sh_dm_plot)
htmltools::html_print(htmltools::HTML(svg))
?export_svg
sh_dm_plot <- readRDS('./images/ShortTermERD.rda')
svg <- DiagrammeRsvg::export_svg(sh_dm_plot)
htmltools::html_print(htmltools::HTML(svg))
mt_dm_plot <- readRDS('./images/MediumTermERD.rda')
svg <- DiagrammeRsvg::export_svg(mt_dm_plot)
htmltools::html_print(htmltools::HTML(svg))
mt_dm_plot <- readRDS('./images/MediumTermERD.rda')
svg <- DiagrammeRsvg::export_svg(mt_dm_plot)
htmltools::html_print(htmltools::HTML(svg))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, comment = "")
library(sf)
library(tidyverse)
library(ReDaMoR)
s <- seq(0.1, 25, by = 0.1)
p <- seq(0, 1, length=100)
bs_visual <- data.frame(
Theme = c(
rep('Land Cover', length(s)*2),
rep('Application', length(p)*2),
rep('Seed Mixes', length(p)*2),
rep('Constants', length(s))
),
Variable = c(
rep('NLCD Class', length(s)),
rep('Class-Slope', length(s)),
rep('Restoration\nMethod', length(p)),
rep('Seeding Rate',  length(p)),
rep('Prop.\nSeed Mixes',  length(p)),
rep('Prop. in Mix', length(p)),
rep('PLS/lb',  length(s))
),
x = c(
rep(s, times = 2),
rep(p, times = 4),
s
),
y = c(
dnorm(s, mean = 12.5, sd = 5),
dnorm(s, mean = 12.5, sd = 2.5),
dbeta(p, 4, 9),
dbeta(p, 2, 20),
dbeta(p, 5, 2),
dbeta(p, 2, 3),
dchisq(s, df = 6)
)
) |>
mutate(
Variable = factor(
Variable, levels = c('NLCD Class', 'Class-Slope', 'Restoration\nMethod', 'Seeding Rate', 'Prop.\nSeed Mixes', 'Prop. in Mix', 'PLS/lb'))
)
rm(s, p)
ggplot(data = bs_visual, aes(x = x, y = y)) +
geom_line() +
geom_area(fill = 'white') +
facet_wrap(~Variable, scales = 'free', nrow = 1) +
theme_void() +
theme(
strip.text = element_text(color = 'white'),
aspect.ratio = 1/1,
panel.spacing = unit(0, 'points'),
panel.background = element_rect(fill='#191919'),
plot.background = element_rect(fill='#191919', color=NA)
)
DiagrammeR::grViz("digraph{
graph[rankdir = LR]
bgcolor = black
node[shape = rectangle, style = filled]
subgraph cluster_0 {
graph[shape = rectangle]
style = rounded
bgcolor = '#755C1B'
label = 'Cover Class\n(Area)'
node[shape = rectangle, fillcolor = '#B78F2A', margin = 0.25]
A[label = 'NLCD 52 Shrub Scrub']
Aa[label = 'NLCD 82 Grassland']
}
subgraph cluster_1 {
graph[shape = rectangle]
style = rounded
bgcolor = '#83BCA9'
label = 'Cover Class x Slope\n(Area)'
node[shape = rectangle, fillcolor = '#A2CDBF', margin = 0.25]
C[label = 'NLCD 52 > 10%']
D[label = 'NLCD 52 < 10%']
}
subgraph cluster_2 {
graph[shape = rectangle]
style = rounded
bgcolor = '#83BCA9'
label = 'Cover Class x Slope\n(Area)'
node[shape = rectangle, fillcolor = '#A2CDBF', margin = 0.25]
Cc[label = 'NLCD 82 > 10%']
Dd[label = 'NLCD 82 < 10%']
}
subgraph cluster_3 {
graph[shape = rectangle]
style = rounded
bgcolor = '#F76F8E'
label = 'Restoration Method\n(Area)'
node[shape = rectangle, fillcolor = '#F99FB4', margin = 0.25]
E[label = 'Drill']
F[label = 'Aerial']
G[label = 'Hydro']
H[label = 'Broadcast']
}
subgraph cluster_4 {
graph[shape = rectangle]
style = rounded
bgcolor = '#F76F8E'
label = 'Restoration Method\n(Area)'
node[shape = rectangle, fillcolor = '#F99FB4', margin = 0.25]
Ee[label = 'Drill']
Ff[label = 'Aerial']
Gg[label = 'Hydro']
Hh[label = 'Broadcast']
}
subgraph cluster_5 {
graph[shape = rectangle]
style = rounded
bgcolor = '#5E5C6C'
label = 'Seeding Rate\n(Count)'
node[shape = rectangle, fillcolor = '#7D7B8E', margin = 0.25]
I[label = 'seeds/area']
J[label = 'seeds/area']
K[label = 'seeds/area']
L[label = 'seeds/area']
}
node[fillcolor = '#0B5563', margin = 0.2]
M[label = 'Prop. Area Applied to']
node[fillcolor = '#89023E', margin = 0.2]
N[label = 'Prop. of Seed Mix\n(when Used)']
edge[color = white, arrowhead = vee, arrowsize = 1.25, linesize = 2.5]
A -> {C D}
Aa -> {Cc Dd}
C -> {E F G H}
D -> {Ee Ff Gg Hh}
E -> I
F -> J
G -> K
H -> L
{I J K L} -> {M}
M -> N
}", width = 1000, height = 400)
sh_dm_plot <- readRDS('./images/ShortTermERD.rda')
svg <- DiagrammeRsvg::export_svg(sh_dm_plot)
htmltools::html_print(htmltools::HTML(svg))
png::writePNG(svg, "bitmap.png", dpi = 144)
setwd('~/Documents/assoRted/EstimatingSeedMarketSize/scripts')
species_longevity <- data.frame(
'PLANTS_code' = as.character(), # USDA Plants code at time of DB establishment- can be updated in overhauls.
'longevity_days' = as.integer(), # User converts input reported data to number of days
'prop_viable' = as.double(), # the proportion viable reported as: 0.77
'longevity_resolution' = as.integer(), # the resolution of measurements in day, if measured every 6 months, ~182
'temperature' = as.integer(),  # the temperature in Celsius to the closest whole number.
'relative_humidity' = as.double(), # the relative humidity as a proportion: 0.2
'data_source' = as.character(), # the source for data, if recent publication DOI preferred, else Lead author year (minimum)
'method' = as.character(), # method of measuring viability
'comment' = as.character() # any analyst comments on the data set.
)
species_PLS <- data.frame(
'PLANTS_code' = as.character(), # the current USDA Plants code - can be updated in overhauls.
'PLS_per_lb' = as.character(), # the number of seeds per lb
'PLS_per_lb_source' =  as.character(), # the source for data, if recent publication DOI preferred, else Lead author year (minimum)
'PLS_per_lb_source_method' =  as.character(), # method, assumed 'weighed'
'PLS_per_lb_source_comment' =  as.character() # any comments on method
)
species_taxonomy <- data.frame(
'PLANTS_code' = as.character(), # the current USDA Plants code - can be updated in overhauls.
'PLANTS_name' = as.character(), # currently accepted USDA plants name  - can be updated in overhauls.
# note genus and family not provided for PLANTS, because of reluctance to fully embrace a phylogenetic perspective.
'POW_name' = as.character(), # currently accepted Plants of the World plants name  - can be updated in overhauls.
'POW_genus' = as.character(), # currently accepted Plants of the World plants name  - can be updated in overhauls.
'POW_family' = as.character(), # currently accepted Plants of the World plants name  - can be updated in overhauls.
'year_populated' = as.numeric(), # the year these values were acquired
'month_populated' = as.numeric() # the number month of the year these values were acquired.
)
administration <- data.frame(
'region_agency' = as.integer(),
'agency' = as.character(),
'DOI_region' = as.integer(), # the DOI region of analysis, as it's number
'NLCD_no' = as.integer(), # the NLCD number for the cover type
'agency_name' = as.character(), # the land management agency.
'agency_area' = as.character() # the particular agencies surface administrative area
)
cover_class <- data.frame(
'NLCD_no' = as.integer(),  # JOIN KEY
'year' = as.integer(), # the year of the measurements
'area' = as.numeric(), # the total area of the cover class on agencies land, in acres
'slope_greater_10' = as.numeric(), # total area of CC on agencies land, where slope >= 10* in acres,
'slope_less_10' = as.numeric(),  # total area of CC on agencies land, where slope < 10* in acres,
'area_burned' = as.numeric(),  # the total area of the cover class on agencies land, in acres which burned.
'slope_greater_10_burned' = as.numeric(), # total area of CC on agencies land, where slope >= 10* in acres which burned.
'slope_less_10_burned' = as.numeric()  # total area of CC on agencies land, where slope < 10* in acres which burned.
)
# this table showcases the estimated ACTUAL treatment rates applied by a practitioner over a time range
restoration_realized <- data.frame(
'NLCD_no' = as.integer(),  # JOIN KEY
'year_end' = as.integer(), # when the practitioner started doing treatments
'year_start' = as.integer(), # when the practitioner stopped doing treatments / survey year
'method' = as.character(), # method one of "Drill", "Aerial", "Broadcast", "Hydro"
'PLS_per_acre' = as.numeric(), # PLS per acre applied
'PLS_per_m2'= as.numeric() # PLS per m2 applied
)
# this table showcases what a practitioner would require to meet land health standards or management objectives.
restoration_needed <- data.frame(
'NLCD_no' = as.integer(),  # JOIN KEY
'method' = as.character(), # method one of "Drill", "Aerial", "Broadcast", "Hydro"
'PLS_per_acre' = as.numeric(), # PLS per acre which would need to be applied to achieve goals
'PLS_per_m2'= as.numeric() # PLS per m2 which would need to be applied to achieve goals
)
species_seedmix_realized <- data.frame(
'NLCD_no' = as.integer(), # JOIN KEY
'PLANTS_code' = as.character(), # JOIN KEY
'pct_in_mix_avg' = as.integer(), # When used, on average, how much of a seed mix contains this species?
'pct_in_mix_min' = as.integer(), # When used, what's the smallest amount, of this a seed mix contains?
'pct_in_mix_max' = as.integer(), # When used, what's the largest amount, of this a seed mix contains?
'pct_area_treated' = as.integer() # what proportion of area get's treated by this species?
)
species_seedmix_needed <- data.frame(
'NLCD_no' = as.integer(), # JOIN KEY
'PLANTS_code' = as.character(), # JOIN KEY
'pct_in_mix_avg' = as.integer(), # Ideally, on average, how much of a seed mix contains this species?
'pct_in_mix_min' = as.integer(), # Ideally, what's the smallest amount, of this a seed mix contains?
'pct_in_mix_max' = as.integer(), # Ideally, what's the largest amount, of this a seed mix contains?
'pct_area_treated' = as.integer() # Ideally what proportion of area get's treated by this species?
)
lifeform_realized <- data.frame(
'NLCD_no' = as.integer(), # JOIN KEY
'pct_graminoid_avg' = as.integer(), # When used, on average, how much of a seed mix contains this lifeform?
'pct_forb_avg' = as.integer(),
'pct_shrub_avg' = as.integer(),
'pct_tree_avg' = as.integer(),
'pct_graminoid_min' = as.integer(), # When used, on average, what's the minimum amount of a seed mix contains this lifeform?
'pct_forb_min' = as.integer(),
'pct_shrub_min' = as.integer(),
'pct_tree_min' = as.integer(),
'pct_graminoid_max' = as.integer(),  # When used, on average, what's the maximum amount of a seed mix contains this lifeform?
'pct_forb_max' = as.integer(),
'pct_shrub_max' = as.integer(),
'pct_tree_max' = as.integer()
)
lifeform_needed <- data.frame(
'NLCD_no' = as.integer(),
'pct_graminoid_avg' = as.integer(),
'pct_forb_avg' = as.integer(),
'pct_shrub_avg' = as.integer(),
'pct_tree_avg' = as.integer(),
'pct_graminoid_min' = as.integer(),
'pct_forb_min' = as.integer(),
'pct_shrub_min' = as.integer(),
'pct_tree_min' = as.integer(),
'pct_graminoid_max' = as.integer(),
'pct_forb_max' = as.integer(),
'pct_shrub_max' = as.integer(),
'pct_tree_max' = as.integer()
)
respondent <- data.frame(
'RespondentID' = as.numeric(), # unique identifier for each respondent - job combination.
'region_agency' = as.numeric(), # combined internally
'agency' = as.character(),  # agency abbreviation
'DOI_region' = as.integer(), # DOI region
'name_first' = as.character(), # respondents first name
'name_last' = as.character(), # last name
'office' = as.character(), # office name
'email'= as.character(),  # email for contact/clarification
'position_start' = as.integer(),  # when they started the position they will be reporting for
'position_end' = as.integer() # optionally the year they left, especially if filling out info based on a previous job.
)
library(dm)
all_tables <- Filter(function(x) is(x, "data.frame"), mget(ls()))
short_items <- c(
'respondent', 'administration', 'cover_class', 'restoration_needed', 'restoration_realized',
'lifeform_needed', 'lifeform_realized')
short_term <- all_tables[short_items]
med_items <- c(
'respondent', 'administration', 'cover_class', 'restoration_needed', 'restoration_realized',
'species_seedmix_needed', 'species_seedmix_realized', 'species_PLS')
medium_term <- all_tables[med_items]
rm(list=setdiff(ls(), c("short_term", 'medium_term')))
short_term_dm <- as_dm(short_term)
short_term_dm <- short_term_dm %>%
dm_add_pk(respondent, RespondentID) %>%
dm_add_pk(administration, region_agency) %>%
dm_add_pk(cover_class, NLCD_no) %>%
dm_add_pk(restoration_realized, NLCD_no) %>%
dm_add_pk(restoration_needed, NLCD_no) %>%
dm_add_fk(
table = respondent, columns = RespondentID, ref_table = administration) %>%
dm_add_fk(
table = administration, columns = region_agency, ref_table = cover_class) %>%
dm_add_fk(
table = cover_class, columns = NLCD_no, ref_table = restoration_realized) %>%
dm_add_fk(
table = cover_class, columns = NLCD_no, ref_table = restoration_needed) %>%
# just short term stuff below
dm_add_pk(lifeform_realized, NLCD_no) %>%
dm_add_pk(lifeform_needed, NLCD_no) %>%
dm_add_fk(
table = restoration_realized, columns = NLCD_no, ref_table = lifeform_realized) %>%
dm_add_fk(
table = restoration_needed, columns = NLCD_no, ref_table = lifeform_needed)
cols <- setNames(
names(short_term), c('#755C1B', '#83BCA9', '#F76F8E', rep('#5E5C6C',2), rep('#0B5563', 2))
)
par(bg = 'red')
sh_dm_plot <- short_term_dm %>%
dm_set_colors(!!!cols) %>%
dm_draw(rankdir = "LR", view_type = "all", columnArrows = FALSE)
svg <- DiagrammeRsvg::export_svg(sh_dm_plot)
png::writePNG(svg, "bitmap.png", dpi = 144)
install.packages('rsvg')
librayr(rsvg)
library(rsvg)
png::writePNG(svg, "bitmap.png", dpi = 144)
htmltools::html_print(htmltools::HTML(svg))
htmltools::html_print(
html = sh_dm_plot,
background = "transparent",
viewer = '../PitchTalk/images/ShortTermERD.html')
png::writePNG(svg, "bitmap.png", dpi = 144)
htmltools::html_print(htmltools::HTML(svg))
htmltools::html_print(htmltools::HTML(svg))
mt_dm_plot <- readRDS('./images/MediumTermERD.rda')
svg <- DiagrammeRsvg::export_svg(mt_dm_plot)
htmltools::html_print(htmltools::HTML(svg))
?html_print
htmltools::html_print(htmltools::HTML(svg), viewer = NULL)
tmltools::HTML(svg)
htmltools::HTML(svg)
?HTML
install.packages("surveydown")
install.packages('surveydown')
install.packages("surveydown")
