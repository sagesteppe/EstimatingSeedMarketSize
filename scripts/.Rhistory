RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA)=='Inf'){lTAA[which(ltAA=='-Inf')] <- 0}
mod <- lm(lTAA ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
listicle <- split(firesYear, f = firesYear$REG_NAME)
lapply(listicle[5], RegionalEstimates)
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA)=='Inf'){lTAA[which(ltAA=='-Inf')] <- 0}
mod <- lm(lTAA ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
lapply(listicle[5], RegionalEstimates)
lapply(listicle[4], RegionalEstimates)
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
return(lTAA)
if(any(lTAA)=='Inf'){lTAA[which(ltAA=='-Inf')] <- 0}
mod <- lm(lTAA ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
lapply(listicle[4], RegionalEstimates)
[[ lapply(listicle[4], RegionalEstimates) ]]
[ lapply(listicle[4], RegionalEstimates) ]
lapply(listicle[4], RegionalEstimates)[[]]
ob <-  lapply(listicle[4], RegionalEstimates)
ob[[]]
unlist(ob)
lTAA <-  unlist(ob)
if(any(lTAA)=='Inf'){lTAA[which(ltAA=='-Inf')] <- 0}
if(any(lTAA=='Inf'))#{lTAA[which(ltAA=='-Inf')] <- 0}
if(any(lTAA=='Inf')){lTAA[which(ltAA=='-Inf')] <- 0}
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='Inf')){lTAA[which(ltAA=='-Inf')] <- 0}
mod <- lm(lTAA ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
ob <-  lapply(listicle[4], RegionalEstimates)
lapply(listicle[5], RegionalEstimates)
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='Inf')){lTAA[which(ltAA=='-Inf')] <- 0}
return(lTAA)
mod <- lm(lTAA ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
lapply(listicle[5], RegionalEstimates)
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(ltAA=='-Inf')] <- 0}
return(lTAA)
mod <- lm(lTAA ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
lapply(listicle[5], RegionalEstimates)
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(ltAA=='-Inf')] <- 0}
mod <- lm(lTAA ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
lapply(listicle[5], RegionalEstimates)
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(lTAA=='-Inf')] <- 0}
mod <- lm(lTAA ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
lapply(listicle[5], RegionalEstimates)
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(lTAA=='-Inf')] <- 0}
return(lTAA)
mod <- lm(lTAA ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
lapply(listicle[5], RegionalEstimates)
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(lTAA=='-Inf')] <- 0.00001}
return(lTAA)
mod <- lm(lTAA ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
lapply(listicle[5], RegionalEstimates)
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(lTAA=='-Inf')] <- 0.000001}
mod <- lm(lTAA ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
lapply(listicle[5], RegionalEstimates)
PredInts
View(PredInts)
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(lTAA=='-Inf')] <- 0.0}
mod <- lm(lTAA ~ FIRE_YEAR, data = x)
return(mod)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
lapply(listicle[5], RegionalEstimates)
mod <- lapply(listicle[5], RegionalEstimates)
PredInts(listicle[[5]], mod)
mod
listicle[[5]]
PredInts(listicle[[5]], mod)
#' Calculate confidence and prediction intervals
#' @param x the original data set
#' @param y the fitted model
PredInts <- function(x, y){
gr <- data.frame(FIRE_YEAR =  seq(min(x$FIRE_YEAR), max(x$FIRE_YEAR)+1))
return(gr)
pred_help <- function(lvl){
mod_pred <- data.frame(
FIRE_YEAR = gr,
predict.lm(
y, gr, SE=TRUE, interval = 'prediction', level = lvl)
)
return(mod_pred)
}
mod_pred95 <- pred_help(0.95)
mod_pred90 <- pred_help(0.9)
mod_pred80 <- pred_help(0.8)
mod_ci <-  data.frame(
FIRE_YEAR = gr,
predict.lm(
y, gr, SE=TRUE, interval = 'confidence', level = 0.95)
)
return(
list(
mod_pred95 = mod_pred95,
mod_pred90 = mod_pred90,
mod_pred80 = mod_pred80,
mod_ci = mod_ci
)
)
}
PredInts(listicle[[5]], mod)
#' Calculate confidence and prediction intervals
#' @param x the original data set
#' @param y the fitted model
PredInts <- function(x, y){
gr <- data.frame(FIRE_YEAR =  seq(min(x$FIRE_YEAR), max(x$FIRE_YEAR)+1))
pred_help <- function(lvl){
mod_pred <- data.frame(
FIRE_YEAR = gr,
predict.lm(
y, gr, SE=TRUE, interval = 'prediction', level = lvl)
)
return(mod_pred)
}
mod_pred95 <- pred_help(0.95)
mod_pred90 <- pred_help(0.9)
mod_pred80 <- pred_help(0.8)
return(mod_pred95)
mod_ci <-  data.frame(
FIRE_YEAR = gr,
predict.lm(
y, gr, SE=TRUE, interval = 'confidence', level = 0.95)
)
return(
list(
mod_pred95 = mod_pred95,
mod_pred90 = mod_pred90,
mod_pred80 = mod_pred80,
mod_ci = mod_ci
)
)
}
PredInts(listicle[[5]], mod)
listicle[5]
gr <- data.frame(FIRE_YEAR =  seq(1990, 2024))
predict.lm(
mod, gr, SE=TRUE, interval = 'prediction', level = lvl)
mod
summary(mod)
mod <- unlist(lapply(listicle[5], RegionalEstimates))
summary(mod)
predict.lm(
mod, gr, SE=TRUE, interval = 'prediction', level = lvl)
mod <- lapply(listicle[5], RegionalEstimates)
mod <- mod[['mod']]
gr <- data.frame(FIRE_YEAR =  seq(1990, 2024))
predict.lm(
mod, gr, SE=TRUE, interval = 'prediction', level = lvl)
summary(mod)
predict.lm(
mod, gr, SE=TRUE, interval = 'prediction', level = 0.95)
mod <- mod[['mod']]
gr <- data.frame(FIRE_YEAR =  seq(1990, 2024))
predict.lm(
mod, gr, SE=TRUE, interval = 'prediction', level = 0.95
)
View(firesYear)
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(lTAA=='-Inf')] <- 0.0}
TotalArea_Acre <- lTAA
mod <- lm(lTAA ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
#' Calculate confidence and prediction intervals
#' @param x the original data set
#' @param y the fitted model
PredInts <- function(x, y){
gr <- data.frame(FIRE_YEAR =  seq(min(x$FIRE_YEAR), max(x$FIRE_YEAR)+1))
pred_help <- function(lvl){
mod_pred <- data.frame(
FIRE_YEAR = gr,
predict.lm(
y, gr, SE=TRUE, interval = 'prediction', level = lvl)
)
return(mod_pred)
}
mod_pred95 <- pred_help(0.95)
mod_pred90 <- pred_help(0.9)
mod_pred80 <- pred_help(0.8)
return(mod_pred95)
mod_ci <-  data.frame(
FIRE_YEAR = gr,
predict.lm(
y, gr, SE=TRUE, interval = 'confidence', level = 0.95)
)
return(
list(
mod_pred95 = mod_pred95,
mod_pred90 = mod_pred90,
mod_pred80 = mod_pred80,
mod_ci = mod_ci
)
)
}
mod <- lapply(listicle[5], RegionalEstimates)
RegionalEstimates
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(lTAA=='-Inf')] <- 0.0}
TotalArea_Acre <- lTAA
mod <- lm(TotalArea_Acre ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
mod <- lapply(listicle[5], RegionalEstimates)
mod <- mod[['mod']]
RegionalEstimates
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(lTAA=='-Inf')] <- 0.0}
x$TotalArea_Acre <- lTAA
mod <- lm(TotalArea_Acre ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
mod <- lapply(listicle[5], RegionalEstimates)
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(lTAA=='-Inf')] <- 0.0}
x$TotalArea_Acre <- lTAA
return(x)
mod <- lm(TotalArea_Acre ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
mod <- lapply(listicle[5], RegionalEstimates)
mod
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(lTAA=='-Inf')] <- 0.0}
x$TotalArea_Acre <- lTAA
return(x)
mod <- lm(TotalArea_Acre ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
RegionalEstimates(listicle[5])
RegionalEstimates(listicle[[5]])
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(lTAA=='-Inf')] <- 0.0}
x$TotalArea_Acre <- lTAA
mod <- lm(TotalArea_Acre ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
mod <- lapply(listicle[5], RegionalEstimates)
mod <- mod[['mod']]
mod <- lapply(listicle[5], RegionalEstimates)
#'
#' @description This function performs four tasks. First it fits a simple linear model to the log
#' transformed input data where FIRE_YEAR predicts TotalArea_Acre. It then develops
#' a confidence interval for this model, as well as three sets of prediction intervals
#' (0.95, 0.9, 0.8, or 1 in 20, 1 in 10, and 1 in 5 odds). It then plots all of these data.
#' Finally it returns estimates of the prediction intervals in both the most recent time period,
#' and time period + 1, via extrapolation.
#'
#' @param x a list of fire summary data by DOI region.
#' @dir a directory to save the plots, and estimates.
RegionalEstimates <- function(x, dir){
lTAA <- log(x$TotalArea_Acre)
if(any(lTAA=='-Inf')){lTAA[which(lTAA=='-Inf')] <- 0.0}
x$TotalArea_Acre <- as.numeric(lTAA)
mod <- lm(TotalArea_Acre ~ FIRE_YEAR, data = x)
ntrvls <- PredInts(x = x, y = mod)
BurnedAreaPlots(x = x, z = ntrvls, mod = mod)
# now we transform the prediction intervals back onto their original scale
}
mod <- lapply(listicle[5], RegionalEstimates)
