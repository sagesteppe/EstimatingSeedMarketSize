# this table showcases what a practitioner would require to meet land health standards or management objectives.
restoration_needed <- data.frame(
'NLCD_no' = as.integer(),  # JOIN KEY
'method' = as.character(), # method one of "Drill", "Aerial", "Broadcast", "Hydro"
'PLS_per_acre' = as.numeric(), # PLS per acre which would need to be applied to achieve goals
'PLS_per_m2'= as.numeric() # PLS per m2 which would need to be applied to achieve goals
)
species_seedmix_realized <- data.frame(
'NLCD_no' = as.integer(), # JOIN KEY
'PLANTS_code' = as.character(), # JOIN KEY
'pct_in_mix_avg' = as.integer(), # When used, on average, how much of a seed mix contains this species?
'pct_in_mix_min' = as.integer(), # When used, what's the smallest amount, of this a seed mix contains?
'pct_in_mix_max' = as.integer(), # When used, what's the largest amount, of this a seed mix contains?
'pct_area_treated' = as.integer() # what proportion of area get's treated by this species?
)
species_seedmix_needed <- data.frame(
'NLCD_no' = as.integer(), # JOIN KEY
'PLANTS_code' = as.character(), # JOIN KEY
'pct_in_mix_avg' = as.integer(), # Ideally, on average, how much of a seed mix contains this species?
'pct_in_mix_min' = as.integer(), # Ideally, what's the smallest amount, of this a seed mix contains?
'pct_in_mix_max' = as.integer(), # Ideally, what's the largest amount, of this a seed mix contains?
'pct_area_treated' = as.integer() # Ideally what proportion of area get's treated by this species?
)
lifeform_realized <- data.frame(
'NLCD_no' = as.integer(), # JOIN KEY
'pct_graminoid_avg' = as.integer(), # When used, on average, how much of a seed mix contains this lifeform?
'pct_forb_avg' = as.integer(),
'pct_shrub_avg' = as.integer(),
'pct_tree_avg' = as.integer(),
'pct_graminoid_min' = as.integer(), # When used, on average, what's the minimum amount of a seed mix contains this lifeform?
'pct_forb_min' = as.integer(),
'pct_shrub_min' = as.integer(),
'pct_tree_min' = as.integer(),
'pct_graminoid_max' = as.integer(),  # When used, on average, what's the maximum amount of a seed mix contains this lifeform?
'pct_forb_max' = as.integer(),
'pct_shrub_max' = as.integer(),
'pct_tree_max' = as.integer()
)
lifeform_needed <- data.frame(
'NLCD_no' = as.integer(),
'pct_graminoid_avg' = as.integer(),
'pct_forb_avg' = as.integer(),
'pct_shrub_avg' = as.integer(),
'pct_tree_avg' = as.integer(),
'pct_graminoid_min' = as.integer(),
'pct_forb_min' = as.integer(),
'pct_shrub_min' = as.integer(),
'pct_tree_min' = as.integer(),
'pct_graminoid_max' = as.integer(),
'pct_forb_max' = as.integer(),
'pct_shrub_max' = as.integer(),
'pct_tree_max' = as.integer()
)
respondent <- data.frame(
'RespondentID' = as.numeric(), # unique identifier for each respondent - job combination.
'region_agency' = as.numeric(), # combined internally
'agency' = as.character(),  # agency abbreviation
'DOI_region' = as.integer(), # DOI region
'name_first' = as.character(), # respondents first name
'name_last' = as.character(), # last name
'office' = as.character(), # office name
'email'= as.character(),  # email for contact/clarification
'position_start' = as.integer(),  # when they started the position they will be reporting for
'position_end' = as.integer() # optionally the year they left, especially if filling out info based on a previous job.
)
all_tables <- Filter(function(x) is(x, "data.frame"), mget(ls()))
short_items <- c(
'respondent', 'administration', 'cover_class', 'restoration_needed', 'restoration_realized',
'lifeform_needed', 'lifeform_realized')
short_term <- all_tables[short_items]
med_items <- c(
'respondent', 'administration', 'cover_class', 'restoration_needed', 'restoration_realized',
'species_seedmix_needed', 'species_seedmix_realized', 'species_PLS')
medium_term <- all_tables[med_items]
rm(list=setdiff(ls(), c("short_term", 'medium_term')))
short_term_dm <- as_dm(short_term)
short_term_dm <- short_term_dm %>%
dm_add_pk(respondent, RespondentID) %>%
dm_add_pk(administration, region_agency) %>%
dm_add_pk(cover_class, NLCD_no) %>%
dm_add_pk(restoration_realized, NLCD_no) %>%
dm_add_pk(restoration_needed, NLCD_no) %>%
dm_add_fk(
table = respondent, columns = RespondentID, ref_table = administration) %>%
dm_add_fk(
table = administration, columns = region_agency, ref_table = cover_class) %>%
dm_add_fk(
table = cover_class, columns = NLCD_no, ref_table = restoration_realized) %>%
dm_add_fk(
table = cover_class, columns = NLCD_no, ref_table = restoration_needed) %>%
# just short term stuff below
dm_add_pk(lifeform_realized, NLCD_no) %>%
dm_add_pk(lifeform_needed, NLCD_no) %>%
dm_add_fk(
table = restoration_realized, columns = NLCD_no, ref_table = lifeform_realized) %>%
dm_add_fk(
table = restoration_needed, columns = NLCD_no, ref_table = lifeform_needed)
cols <- setNames(
names(short_term), c('#755C1B', '#83BCA9', '#F76F8E', rep('#5E5C6C',2), rep('#0B5563', 2))
)
short_term_dm %>%
dm_set_colors(!!!cols) %>%
dm_draw(rankdir = "LR", view_type = "all", columnArrows = FALSE)
### plot two distinct graphs - one for short term - one for medium term .
medium_term_dm <- as_dm(medium_term)
medium_term_dm <- medium_term_dm %>%
dm_add_pk(respondent, RespondentID) %>%
dm_add_pk(administration, region_agency) %>%
dm_add_pk(cover_class, NLCD_no) %>%
dm_add_pk(restoration_realized, NLCD_no) %>%
dm_add_pk(restoration_needed, NLCD_no) %>%
dm_add_pk(species_PLS, PLANTS_code) %>%
dm_add_fk(
table = respondent, columns = RespondentID, ref_table = administration) %>%
dm_add_fk(
table = administration, columns = region_agency, ref_table = cover_class) %>%
dm_add_fk(
table = cover_class, columns = NLCD_no, ref_table = restoration_realized) %>%
dm_add_fk(
table = cover_class, columns = NLCD_no, ref_table = restoration_needed) %>%
# just medium term stuff below
dm_add_pk(species_seedmix_needed, NLCD_no) %>%
dm_add_pk(species_seedmix_realized, NLCD_no) %>%
dm_add_fk(
table = restoration_realized, columns = NLCD_no, ref_table = species_seedmix_realized) %>%
dm_add_fk(
table = restoration_needed, columns = NLCD_no, ref_table = species_seedmix_needed) %>%
dm_add_fk(
table = species_seedmix_needed, columns = PLANTS_code, ref_table = species_PLS
) %>%
dm_add_fk(
table = species_seedmix_realized, columns = PLANTS_code, ref_table = species_PLS
)
cols <- setNames(
names(medium_term), c('#755C1B', '#83BCA9', '#F76F8E', rep('#5E5C6C', 2), rep('#0B5563', 2), '#89023E')
)
medium_term_dm %>%
dm_set_colors(!!!cols) %>%
dm_draw( rankdir = "LR", view_type = "all", columnArrows = FALSE)
bound <- data.frame(
y = c(30, 30, 50, 50, 30),
x = c(-85, -125, -125, -85, -85)
)
View(bound)
max(bound$x)
min(bound$x)
max(bound$y)
min(bound$y)
# remotes::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
library(tidyverse)
library(sf)
library(terra)
bound <- data.frame(
y = c(30, 30, 50, 50, 30),
x = c(-85, -125, -125, -85, -85)
) |>
sf::st_as_sf(coords = c('x', 'y'), crs = 4326) |>
sf::st_bbox() |>
sf::st_as_sfc()
View(bound)
st_as_sf(bound)
bb <- pgirmess::bbox2sf(w = bb_vals[1], e = bb_vals[2],
s = bb_vals[3], n = bb_vals[4]) %>%
st_as_sf()
install.packages('pgirmess')
bb <- pgirmess::bbox2sf(w = bb_vals[1], e = bb_vals[2],
s = bb_vals[3], n = bb_vals[4]) %>%
st_as_sf()
bb_vals <- c(-125, -85, 30, 50)
bb <- pgirmess::bbox2sf(w = bb_vals[1], e = bb_vals[2],
s = bb_vals[3], n = bb_vals[4]) %>%
st_as_sf()
st_as_sf(bound)
bb == st_as_sf(bound)
shiny::runApp('Documents/assoRted/EstimatingSeedMarketSize/survey')
runApp('Documents/assoRted/EstimatingSeedMarketSize/survey')
runApp('Documents/assoRted/EstimatingSeedMarketSize/survey')
?sd_next
runApp('Documents/assoRted/EstimatingSeedMarketSize/survey')
runApp('Documents/assoRted/EstimatingSeedMarketSize/survey')
runApp('Documents/assoRted/EstimatingSeedMarketSize/survey')
runApp('Documents/assoRted/EstimatingSeedMarketSize/survey')
runApp('Documents/assoRted/EstimatingSeedMarketSize/survey')
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, comment = "")
png_files <- list.files("../results/Plots/AnnualSummariesTreatable", pattern = "Mississippi_Basin.*png$", full.names = TRUE)
gifski::gifski(png_files, gif_file = "animation.gif", width = 800, height = 600, delay = 1)
::: {.column width = '50%'}
getwd()
::: {.column width = '50%'}
![Elephant](./images/AnnualSummaryTreatableMississippi.gif)
png_files <- list.files("../results/Plots/AnnualSummariesTreatable", pattern = "Mississippi_Basin.*png$", full.names = TRUE)
gifski::gifski(png_files, gif_file = "./images/AnnualSummaryTreatableMississippi.gif", width = 800, height = 600, delay = 1)
![Elephant](./images/AnnualSummaryTreatableMississippi.gif)
setwd('~/Documents/assoRted/EstimatingSeedMarketSize/scripts')
library(sf)
library(tidyverse)
library(rmapshaper)
public_lands_pal <- setNames(
# these manually transcribed from the H-1553-Publications Standards Manual
# Handbook - hopefully no errors.
# [H-1553](https://www.ntc.blm.gov/krc/uploads/223/Ownership_Map_Color_Reference_Sheet.pdf)
c( # colours
rgb(254, 230, 121, max = 255), # BLM
rgb(204, 235, 197, max = 255), # USFS
rgb(202, 189, 220, max = 255), # NPS
rgb(127, 204, 167, max = 255), # FWS
rgb(255, 255, 179, max = 255), # USBR
rgb(253, 180, 108, max = 255), # TRIB
rgb(251, 180, 206, max = 255), # DOD
rgb(228, 196, 159, max = 255), # OTHF
rgb(179, 227, 238, max = 255), # SLB
rgb(255, 255, 255, max = 255), # PVT
rgb(143, 181, 190, max = 255) # CITY CNTY
),
c( # names
'BLM', 'USFS', 'NPS', 'FWS', 'USBR', 'TRIB', 'DOD', 'OTHF', 'SLB', 'PVT', 'CITY_CNTY_SDC_SDNR_SPR')
)
regions <- st_read(
'../data/geospatial/AdministrativeUnits/DOIRegions/DOI_12_Unified_Regions_20180801.shp',
quiet = T)
l3 <- st_read(
'../data/geospatial/AdministrativeUnits/Ecoregions/us_eco_l3.shp',
quiet = T)
###############################################################################
### Simplify the Protected areas database for cartography purposes ##
pad <- st_read(
'../data/geospatial/AdministrativeUnits/SurfaceManagement/PADUS4_0Geodatabase/PADUS4_0_Geodatabase.gdb',
quiet = TRUE, layer = 'PADUS4_0Fee') |>
select(Mang_Name, Loc_Ds, Unit_Nm) |>
filter(Mang_Name %in% c('BLM', 'NPS', 'FWS')) |>
st_cast('MULTIPOLYGON')
pad_simp <- st_read(
'../data/geospatial/AdministrativeUnits/SurfaceManagement/PAD_simp.shp')
pad_simp <- st_read(
'../data/geospatial/AdministrativeUnits/SurfaceManagement/PAD_simp.shp')
pad_simp <- st_intersection(regions, pad_simp)
pad_simp <- pad_simp[which(st_geometry_type(pad_simp) %in% c('POLYGON', 'MULTIPOLYGON') == TRUE), ]
pad_simp <- pad_simp[which(st_geometry_type(pad_simp) %in% c('POLYGON', 'MULTIPOLYGON') == TRUE), ]
terrest_nt <- st_read(
'../data/geospatial/TerrestrialAreas/non-us_terrestrial/non-us_terrestrial.shp')
terrest <- st_read(
'../data/geospatial/TerrestrialAreas/focal_terrestrial/focal_terrestrial.shp')
ak <- filter(regions, REG_NAME == 'Alaska') |>
sf::st_bbox()
ak_plot <- ggplot() +
geom_sf(data = terrest, fill = '#C4D4C8') +
geom_sf(data = pad_simp, aes(fill = Mang_Name), color = NA) +
scale_fill_manual(values = public_lands_pal) +
coord_sf(xlim = c(ak[1], ak[3]), ylim = c(ak[2], ak[4])) +
theme_void() +
theme(
legend.position = 'none'
)
rm(ak)
lks <- rnaturalearth::ne_download(
type = "lakes",
category = "physical",
scale = "small") |>
select(name) |>
sf::st_make_valid() |>
sf::st_transform(st_crs(regions))
lks <- lks [ lengths(st_intersects(lks, regions)) > 0, ]
conus_reg <- filter(regions, ! REG_NAME %in% c('Alaska', 'Pacific Islands')) |>
sf::st_bbox()
conus_plot <- ggplot() +
geom_sf(data = terrest, fill = '#C4D4C8') +
#  geom_sf(data = terrest_nt, fill = '#837569') +
geom_sf(data = lks, fill = '#2D728F') +
geom_sf(data = pad_simp, aes(fill = Mang_Name), color = NA) +
geom_sf(data = regions, color = '#ED254E', fill = NA) +
scale_fill_manual(values = public_lands_pal) +
coord_sf(
xlim = c(conus_reg[1], conus_reg[3]),
ylim = c(conus_reg[2], conus_reg[4])
) +
theme_void() +
theme(
#    panel.background = element_rect(fill = '#2D728F'),
legend.position = 'none'
)
cowplot::ggdraw() +
cowplot::draw_plot(conus_plot) +
cowplot::draw_plot(pi_plot, x = 0.2, y = -0.2, width = 0.5, height = 0.5) +
cowplot::draw_plot(ak_plot, x = 0.2, y = -0.2, width = 0.5, height = 0.5)
pi <- filter(regions, REG_NAME == 'Pacific Islands') |>
sf::st_bbox()
pi_plot <- ggplot() +
geom_sf(data = terrest, fill = '#C4D4C8') +
geom_sf(data = pad_simp, aes(fill = Mang_Name), color = NA) +
scale_fill_manual(values = public_lands_pal) +
coord_sf(xlim = c(ak[1], ak[3]), ylim = c(ak[2], ak[4])) +
theme_void() +
theme(
legend.position = 'none'
)
pi_plot <- ggplot() +
geom_sf(data = terrest, fill = '#C4D4C8') +
geom_sf(data = pad_simp, aes(fill = Mang_Name), color = NA) +
scale_fill_manual(values = public_lands_pal) +
coord_sf(xlim = c(pi[1], pi[3]), ylim = c(pi[2], pi[4])) +
theme_void() +
theme(
legend.position = 'none'
)
pi_plot
pi_plot <- ggplot() +
geom_sf(data = terrest, fill = '#C4D4C8') +
geom_sf(data = pad_simp, aes(fill = Mang_Name), color = NA) +
scale_fill_manual(values = public_lands_pal) +
coord_sf(xlim = c(pi[1], pi[3]), ylim = c(pi[2], pi[4])) +
theme_void() +
theme(
legend.position = 'none'
)
pi_plot
cowplot::ggdraw() +
cowplot::draw_plot(conus_plot) +
cowplot::draw_plot(pi_plot, x = 0.2, y = -0.2, width = 0.5, height = 0.5) +
cowplot::draw_plot(ak_plot, x = 0.2, y = -0.2, width = 0.5, height = 0.5)
cowplot::ggdraw() +
cowplot::draw_plot(conus_plot) +
# cowplot::draw_plot(pi_plot, x = 0.2, y = -0.2, width = 0.5, height = 0.5) +
cowplot::draw_plot(ak_plot, x = 0.25, y = -0.2, width = 0.5, height = 0.5)
cowplot::ggdraw() +
cowplot::draw_plot(conus_plot) +
# cowplot::draw_plot(pi_plot, x = 0.2, y = -0.2, width = 0.5, height = 0.5) +
cowplot::draw_plot(ak_plot, x = 0.2, y = -0.175, width = 0.5, height = 0.5)
cowplot::ggdraw() +
cowplot::draw_plot(conus_plot) +
cowplot::draw_plot(pi_plot, x = 0.8, y = -0.2, width = 0.25, height = 0.25) +
cowplot::draw_plot(ak_plot, x = 0.2, y = -0.175, width = 0.5, height = 0.5)
conus_plot <- ggplot() +
geom_sf(data = terrest, fill = '#C4D4C8') +
#  geom_sf(data = terrest_nt, fill = '#837569') +
geom_sf(data = lks, fill = '#2D728F') +
geom_sf(data = pad_simp, aes(fill = Mang_Name), color = NA) +
geom_sf(data = regions, color = '#ED254E', fill = NA) +
scale_fill_manual(values = public_lands_pal) +
coord_sf(
xlim = c(conus_reg[1]-10000, conus_reg[3]+10000),
ylim = c(conus_reg[2], conus_reg[4])
) +
theme_void() +
theme(
legend.position = 'none'
)
conus_plot
library(tidyverse)
read.csv('../data/processed/NoFires-TotalArea_byDOIRegion.csv')
annual <- read.csv('../data/processed/NoFires-TotalArea_byDOIRegion.csv')
install.packages('extRemes')
library(extremes)
library(extRemes)
annual
filter(annual, REG_NAME == 'ALASKA' & NoFire > 0)
NoFire
annual
filter(annual, REG_NAME == 'Alaska' & NoFire > 0)
ak <- filter(annual, REG_NAME == 'Alaska' & NoFire > 0)
fevd(ak$TotalArea_Acre,
type = 'gev',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units, threshold...)
fevd(ak$TotalArea_Acre,
type = 'GEV',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units, threshold...)
fevd(ak$TotalArea_Acre,
type = 'GEV',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units = '1/year')
plot(fevd)
ak_ext <- fevd(ak$TotalArea_Acre,
type = 'GEV',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units = '1/year')
plot(ak_ext)
View(annual)
ak <- filter(annual, REG_NAME == 'California Great-Basin' & NoFire > 0)
ak_ext <- fevd(ak$TotalArea_Acre,
type = 'GEV',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units = '1/year')
ak <- filter(annual, REG_NAME == 'California-Great Basin' & NoFire > 0)
ak_ext <- fevd(ak$TotalArea_Acre,
type = 'GEV',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units = '1/year')
plot(ak_ext)
ak
ak <- filter(annual, REG_NAME == 'California-Great Basin' & NoFire > 0)
ak_ext <- fevd(ak$TotalArea_Acre,
type = 'GEV',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units = '1/year')
plot(ak_ext)
ak <- filter(annual, REG_NAME == 'California-Great Basin' & NoFire > 0)
View(ak)
ak_ext <- fevd(ak$TotalArea_Acre,
type = 'GEV',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units = '1/year')
plot(ak_ext)
ak_ext <- fevd(ak$TotalArea_Acre,
type = 'GP',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units = '1/year')
ak_ext <- fevd(ak$TotalArea_Acre,
type = 'GEV',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units = '1/year')
plot(ak_ext)
ak <- filter(annual, REG_NAME == 'Mississippi Basin' & NoFire > 0)
ak_ext <- fevd(ak$TotalArea_Acre,
type = 'GEV',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units = '1/year')
plot(ak_ext)
ak_ext
ak_ext <- fevd(
log(ak$TotalArea_Acre),
type = 'GEV',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units = '1/year')
plot(ak_ext)
ak <- filter(annual, REG_NAME == 'California-Great Basin' & NoFire > 0)
ak_ext <- fevd(
log(ak$TotalArea_Acre),
type = 'GEV',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units = '1/year')
plot(ak_ext)
View(ak_ext)
ak_ext[["x"]]
ak_ext[["weights"]]
View(ak_ext)
ci(ak_ext, type = "parameter")
ci(ak_ext, type = "parameter", method = 'boot')
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(3.5,7.75), verbose = TRUE)
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(10), verbose = TRUE)
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(10, 12), verbose = TRUE)
plot(ak_ext)
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(14, 15), verbose = TRUE)
plot(ak_ext)
ci(ak_ext, type = "return.level", method = "proflik",
return.period = 50, verbose = TRUE)
ci(ak_ext, type = "return.level", method = "proflik",
return.period = 10, verbose = TRUE)
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(14, 15), verbose = TRUE)
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(14, 14.1), verbose = TRUE)
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(14, 14.2), verbose = TRUE)
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(14, 15), verbose = TRUE)
data(Fort)
fit <- fevd(Prec, Fort, threshold = 2, type = "GP",
units = "inches", verbose = TRUE)
fit
ci(fit, type = "parameter")
## Not run:
ci(fit, type = "return.level", method = "proflik",
xrange = c(3.5,7.75), verbose = TRUE)
ci(fit, method = "boot")
plot(fit)
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(14, 15), verbose = TRUE)
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(13, 14), verbose = TRUE)
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(14, 15), verbose = TRUE)
plot(ak_ext)
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(15, 16), verbose = TRUE)
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(17, 18), verbose = TRUE) # these are used on values we have not predicted yet..
ak_ext <- fevd(
log(ak$TotalArea_Acre),
type = 'GEV',
units ='Acres',
span = length(ak$TotalArea_Acre),
time.units = '1/year')
plot(ak_ext)
ci(ak_ext, type = "parameter", method = 'boot')
ci(ak_ext, type = "parameter", method = 'boot')
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(15, 16), verbose = TRUE) # these are used on values we have not predicted yet..
plot(ak_ext)
ci(fit, method = "boot")
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(10, 16), verbose = TRUE) # these are used on values we have not predicted yet..
ci(ak_ext, type = "return.level", method = "proflik",
xrange = c(10, 20), verbose = TRUE) # these are used on values we have not predicted yet..
