) |>
sf::st_as_sf(coords = c('x', 'y'), crs = 4326) |>
sf::st_union() |>
sf::st_cast('LINESTRING')
library(terra)
library(tidyverse)
library(sf)
sp <- file.path('..', 'data', 'geospatial', 'NLCD')
antimeridian <- data.frame(
x = c(-180, -180),
y = c(0, 90)
) |>
sf::st_as_sf(coords = c('x', 'y'), crs = 4326) |>
sf::st_union() |>
sf::st_cast('LINESTRING')
p <- file.path('..', 'data', 'geospatial', 'DOIadministered', 'DOIterrestrial.gpkg')
padus <- st_read(file.path(p), quiet = TRUE) |>
# we are dealing with areas over significant curvature of the earth
# and many high latitude areas so will need to calculate our areas on
# the geoid
sf::st_transform(4326)
padus <- st_read(file.path(p), quiet = TRUE) |>
# we are dealing with areas over significant curvature of the earth
# and many high latitude areas so will need to calculate our areas on
# the geoid
sf::st_transform(4326)
# when we do this we find out some of our geometries have a problem...
indx <- st_is_valid(padus)
which(indx==FALSE)
# notice we have a ton of multipolygons, what we will find is that it's
# usually a single polygon within these objects which is the problem
invalid <- padus[which(indx == FALSE),]
pad_probs <- st_read(file.path(p), quiet = TRUE) |>
filter(Unit_Nm %in% invalid$Unit_Nm)
antimeridian <- sf::st_transform(antimeridian, crs(pad_probs))
indx <- st_intersects(pad_probs, antimeridian) |> lengths()
indx
st_intersects(pad_probs, antimeridian)
plot(antimeridian)
antimeridian <- data.frame(
x = c(-180, -180),
y = c(0, 90)
) |>
sf::st_as_sf(coords = c('x', 'y'), crs = 4326) |>
sf::st_union() |>
sf::st_cast('LINESTRING')
plot(antimeridian)
pad_probs <- st_read(file.path(p), quiet = TRUE) |>
filter(Unit_Nm %in% invalid$Unit_Nm)
antimeridian <- sf::st_transform(antimeridian, crs(pad_probs))
indx <- st_intersects(pad_probs, antimeridian) |> lengths()
indx <- st_intersects(antimeridian, pad_probs) |> lengths()
indx
indx <- st_intersects(pad_probs, antimeridian) |> lengths()
antimeridian <- sf::st_transform(antimeridian, st_crs(pad_probs))
indx <- st_intersects(pad_probs, antimeridian) |> lengths()
indx
pad_probs2split <- pad_probs[indx, ]
antimeridian <- data.frame(
x = c(-180, -180),
y = c(0, 90)
) |>
sf::st_as_sf(coords = c('x', 'y'), crs = 4326) |>
sf::st_union() |>
sf::st_cast('LINESTRING')
antimeridian <- sf::st_transform(antimeridian, st_crs(pad_probs))
indx <- st_intersects(pad_probs, antimeridian) |> lengths()
indx
table(pad_probs$Unit_Nm)
pad_probs <- st_read(file.path(p), quiet = TRUE) |>
filter(Unit_Nm %in% invalid$Unit_Nm) |>
st_transform(4326)
sf::st_is_valid(pad_probs)
sf::st_is_valid(pad_probs)
isolated <- filter(pad_probs, !st_is_valid)
isolated <- filter(pad_probs, !st_is_valid())
isolated <- filter(pad_probs, !st_is_valid(.))
isolated <- filter(pad_probs, !st_is_valid(pad_probs))
isolated
plot(isolated)
plot(isolated[,'Unit_Nm'])
ggplot() +
geom_sf(data = isolated, aes(fill = 'Unit_Nm'))
ggplot() +
geom_sf(data = isolated, aes(fill = 'Unit_Nm'))
isolated_fixed <- sf::st_make_valid(isolated)
sf::st_is_valid(isolated_fixed)
isolated_fixed_final <- sf::st_is_valid(isolated_fixed)
ggplot() +
geom_sf(data = isolated_fixed_final)
ggplot() +
geom_sf(data = isolated_fixed_final)
isolated_fixed_final <- sf::st_is_valid(isolated_fixed)
isolated_fixed_final <- isolated_fixed[sf::st_is_valid(isolated_fixed),]
ggplot() +
geom_sf(data = isolated_fixed_final)
isolated_fixed_problem <- isolated_fixed[!sf::st_is_valid(isolated_fixed),]
ggplot() +
geom_sf(data = isolated_fixed_problem)
sf::st_cast(isolated_fixed_problem, 'POLYGON')
isolated_fixed_problem <- sf::st_cast(isolated_fixed_problem, 'POLYGON')
iso_fix_pro <- sf::st_union(isolated_fixed_problem)
sf::st_is_valid(iso_fix_pro)
isolated_fixed_problem
sf::st_drop_geometry(isolated_fixed_problem)
sf::st_drop_geometry(isolated_fixed_problem)[1,]
iso_fix_pro
bind_cols(
sf::st_drop_geometry(isolated_fixed_problem)[1,],
geom = iso_fix_pro
)
iso_fix_pro <- bind_cols(
sf::st_drop_geometry(isolated_fixed_problem)[1,],
geom = iso_fix_pro
)
bind_rows(isolated_fixed_problem, iso_fix_pro)
isolated_fixed_problem <- bind_rows(isolated_fixed_problem, iso_fix_pro)
ggplot() +
geom_sf(data = isolated_fixed_problem)
isolated_fixed_problem <- bind_rows(isolated_fixed_final, iso_fix_pro)
ggplot() +
geom_sf(data = isolated_fixed_problem)
bind_rows(
filter(pad_probs, st_is_valid(pad_probs)),
isolated_fixed_problem
)
fixed <- bind_rows(
filter(pad_probs, st_is_valid(pad_probs)),
isolated_fixed_problem
)
ggplot() +
geom_sf(data = fixed)
ggplot() +
geom_sf(data = fixed)
padus2 <- bind_rows(
padus[which(indx == TRUE),],
fixed
)
ggplot() +
geom_sf(data = padus2)
indx <- sf::st_is_valid(padus2)
any(indx==FALSE)
areas <- sf::st_area(padus2)
padus[which(indx == TRUE),]
padus2 <- bind_rows(
padus[which(indx == TRUE),],
fixed
)
padus[which(indx == TRUE),]
# when we do this we find out some of our geometries have a problem...
indx <- st_is_valid(padus)
padus2 <- bind_rows(
padus[which(indx == TRUE),],
fixed
)
indx2 <- sf::st_is_valid(padus2)
any(indx2 == FALSE)
areas <- sf::st_area(padus2)
areas
data.frame(
st_drop_geometry(padus2),
Area = areas
)
areas2 <- data.frame(
st_drop_geometry(padus2),
Area = areas
)
View(areas2)
areas2 <- data.frame(
st_drop_geometry(padus2),
Area = areas
) |>
group_by(Mang_Name) |>
summarize(Total = sum(Area))
View(areas2)
areas2 <- data.frame(
st_drop_geometry(padus2),
Area = areas
) |>
group_by(Mang_Name) |>
summarize(Total = units::set_units(sum(Area), ha))
109855215.90 * 2.471051565
prettyNum(109855215.90 * 2.471051565, ',')
areas2
85437786.58*2.471051565
prettyNum(85437786.58*2.471051565, ',')
prettyNum(31089741.23*2.471051565, ',')
View(areas2)
p <- file.path('..', 'data', 'geospatial', 'DOIadministered', 'DOIterrestrial.gpkg')
padus <- st_read(file.path(p), quiet = TRUE) |>
# we are dealing with areas over significant curvature of the earth
# and many high latitude areas so will need to calculate our areas on
# the geoid
sf::st_transform(4326)
# when we do this we find out some of our geometries have a problem...
indx <- st_is_valid(padus)
which(indx==FALSE)
# notice we have a ton of multipolygons, what we will find is that it's
# usually a single polygon within these objects which is the problem
invalid <- padus[which(indx == FALSE),]
pad_probs <- st_read(file.path(p), quiet = TRUE) |>
filter(Unit_Nm %in% invalid$Unit_Nm) |>
st_transform(4326)
isolated <- filter(pad_probs, !st_is_valid(pad_probs))
isolated_fixed <- sf::st_make_valid(isolated)
# isolated_fixed_final <- isolated_fixed[sf::st_is_valid(isolated_fixed),]
isolated_fixed_problem <- isolated_fixed[!sf::st_is_valid(isolated_fixed),]
isolated_fixed_problem <- sf::st_cast(isolated_fixed_problem, 'POLYGON')
iso_fix_pro <- sf::st_union(isolated_fixed_problem)
# now we can combine these problem data geometries which we have fixed.
iso_fix_pro <- bind_cols(
sf::st_drop_geometry(isolated_fixed_problem)[1,],
geom = iso_fix_pro
)
isolated_fixed_problem <- bind_rows(isolated_fixed_final, iso_fix_pro)
# now we can add them back to the geometries which were valid
fixed <- bind_rows(
filter(pad_probs, st_is_valid(pad_probs)),
isolated_fixed_problem
)
padus2 <- bind_rows(
padus[which(indx == TRUE),],
fixed
)
indx2 <- sf::st_is_valid(padus2)
any(indx2 == FALSE)
areas <- sf::st_area(padus2)
areas2 <- data.frame(
st_drop_geometry(padus2),
Area = areas
) |>
group_by(Mang_Name) |>
summarize(Total = units::set_units(sum(Area), ha))
areas2
library(terra)
library(tidyverse)
library(sf)
sp <- file.path('..', 'data', 'geospatial', 'NLCD')
antimeridian <- data.frame(
x = c(-180, -180),
y = c(0, 90)
) |>
sf::st_as_sf(coords = c('x', 'y'), crs = 4326) |>
sf::st_union() |>
sf::st_cast('LINESTRING')
p <- file.path('..', 'data', 'geospatial', 'DOIadministered', 'DOIterrestrial.gpkg')
padus <- st_read(file.path(p), quiet = TRUE) |>
# we are dealing with areas over significant curvature of the earth
# and many high latitude areas so will need to calculate our areas on
# the geoid
sf::st_transform(4326)
padus <- st_read(file.path(p), quiet = TRUE) |>
# we are dealing with areas over significant curvature of the earth
# and many high latitude areas so will need to calculate our areas on
# the geoid
sf::st_transform(4326)
# when we do this we find out some of our geometries have a problem...
indx <- st_is_valid(padus)
which(indx==FALSE)
# notice we have a ton of multipolygons, what we will find is that it's
# usually a single polygon within these objects which is the problem
invalid <- padus[which(indx == FALSE),]
## we will reload the
pad_probs <- st_read(file.path(p), quiet = TRUE) |>
filter(Unit_Nm %in% invalid$Unit_Nm) |>
st_transform(4326)
isolated <- filter(pad_probs, !st_is_valid(pad_probs))
isolated_fixed <- sf::st_make_valid(isolated)
padus <- padus[which(indx == TRUE),]
isolated_fixed
isolated_fixed_problem <- isolated_fixed[!sf::st_is_valid(isolated_fixed),]
isolated_fixed_problem <- sf::st_cast(isolated_fixed_problem, 'POLYGON')
iso_fix_pro <- sf::st_union(isolated_fixed_problem)
iso_fix_pro <- bind_cols(
sf::st_drop_geometry(isolated_fixed_problem)[1,],
geom = iso_fix_pro
)
isolated_fixed_problem <- bind_rows(isolated_fixed_final, iso_fix_pro)
isolated_fixed_problem <- bind_rows(filter(isolated_fixed, st_is_valid), iso_fix_pro)
iso_fix_pro
View(pad_probs)
View(invalid)
invalid <- padus[which(indx == FALSE),]
padus <- padus[which(indx == TRUE),]
# most of these can actually be fixed.
invalid_fixed <- sf::st_make_valid(invalid)
# however 1 remains problematic, we will cast the multi* to polygons
# and re-union those.
invalid_fixed_problem <- invalid_fixed[!sf::st_is_valid(invalid_fixed),]
invalid_fixed_problem <- sf::st_cast(invalid_fixed_problem, 'POLYGON')
iso_fix_pro <- sf::st_union(isolated_fixed_problem)
# now we can combine these problem data geometries which we have fixed.
iso_fix_pro <- bind_cols(
sf::st_drop_geometry(isolated_fixed_problem)[1,],
geom = iso_fix_pro
)
isolated_fixed_problem <- bind_rows(invalid_fixed, iso_fix_pro)
isolated_fixed_problem
# now we can add them back to the geometries which were valid
fixed <- bind_rows(
filter(pad_probs, st_is_valid(pad_probs)),
isolated_fixed_problem
)
padus2 <- bind_rows(
padus,
fixed
)
indx2 <- sf::st_is_valid(padus2)
indx2 <- sf::st_is_valid(padus2)
any(indx2 == FALSE)
any(indx2 == FALSE)
ea(padus2)
areas <- sf::st_area(padus2)
areas2 <- data.frame(
st_drop_geometry(padus2),
Area = units::set_units(sf::st_area(padus2), ha)
) |>
group_by(Mang_Name) |>
summarize(Total = sum(Area))
areas2
prettyNum(109395411.69 * 2.471051565, ',')
library(terra)
library(tidyverse)
library(sf)
sp <- file.path('..', 'data', 'geospatial', 'NLCD')
antimeridian <- data.frame(
x = c(-180, -180),
y = c(0, 90)
) |>
sf::st_as_sf(coords = c('x', 'y'), crs = 4326) |>
sf::st_union() |>
sf::st_cast('LINESTRING')
p <- file.path('..', 'data', 'geospatial', 'DOIadministered', 'DOIterrestrial.gpkg')
padus <- st_read(file.path(p), quiet = TRUE) |>
# we are dealing with areas over significant curvature of the earth
# and many high latitude areas so will need to calculate our areas on
# the geoid
sf::st_transform(4326)
indx <- st_is_valid(padus)
which(indx==FALSE)
invalid <- padus[which(indx == FALSE),]
padus <- padus[which(indx == TRUE),]
# most of these can actually be fixed.
invalid_fixed <- sf::st_make_valid(invalid)
# however 1 remains problematic, we will cast the multi* to polygons
# and re-union those.
invalid_fixed_problem <- invalid_fixed[!sf::st_is_valid(invalid_fixed),]
invalid_fixed_problem <- sf::st_cast(invalid_fixed_problem, 'POLYGON')
View(invalid_fixed_problem)
iso_fix_pro <- sf::st_union(isolated_fixed_problem)
iso_fix_pro <- sf::st_union(invalid_fixed_problem)
# now we can combine these problem data geometries which we have fixed.
iso_fix_pro <- bind_cols(
sf::st_drop_geometry(isolated_fixed_problem)[1,],
geom = iso_fix_pro
)
# now we can combine these problem data geometries which we have fixed.
iso_fix_pro <- bind_cols(
sf::st_drop_geometry(invalid_fixed_problem)[1,],
geom = iso_fix_pro
)
View(iso_fix_pro)
# this contains out readily fixed invalid geometry, and our final sticky geometry.
isolated_fixed_problem <- bind_rows(invalid_fixed, iso_fix_pro)
rm(invalid_fixed_problem)
# this contains out readily fixed invalid geometry, and our final sticky geometry.
isolated_fixed_problem <- bind_rows(invalid_fixed, iso_fix_pro)
# now we can add them back to the geometries which were valid
fixed <- bind_rows(
filter(pad_probs, st_is_valid(pad_probs)),
isolated_fixed_problem
)
# now we can add them back to the geometries which were valid
fixed <- bind_rows(
padus,
isolated_fixed_problem
)
# now we can add them back to the geometries which were valid
fixed <- bind_rows(
invalid_fixed,
isolated_fixed_problem
)
rm(invalid_fixed, isolated_fixed_problem, iso_fix_pro)
# and finally combie all the data back together as one valid data set.
padus2 <- bind_rows(
padus,
fixed
)
# test again to see if any records remain invalid.
any(sf::st_is_valid(padus2) == FALSE)
areas <- sf::st_area(padus2)
st_is_valid(fixed)
st_make_valid(fixed)
fixed <- st_make_valid(fixed)
# and finally combie all the data back together as one valid data set.
padus2 <- bind_rows(
padus,
fixed
)
# test again to see if any records remain invalid.
any(sf::st_is_valid(padus2) == FALSE)
wtf <- filter(padus2, !st_is_valid)
wtf <- filter(padus2, !st_is_valid())
wtf <- filter(padus2, !st_is_valid(padus2))
View(wtf)
plot(wtf)
st_extract(wtf, 'POLYGON')
st_cast(wtf, 'POLYGON')
wtf <- st_cast(wtf, 'POLYGON') |>
st_union()
wtf <- filter(padus2, !st_is_valid(padus2))
wtf <- st_cast(wtf, 'POLYGON') |>
mutate(geom = st_union(geom)) |>
distinct()
View(wtf)
padus2 <- bind_rows(
padus,
fixed
)
any(sf::st_is_valid(padus2) == FALSE)
st_is_valid(wtf)
all(st_is_valid(padu2)==TRUE)
all(st_is_valid(padus2)==TRUE)
wtf <- filter(padus2, !st_is_valid(padus2))
wtf <- st_cast(wtf, 'POLYGON') |>
mutate(geom = st_union(geom)) |>
distinct()
padus2 <- bind_rows(
filter(padus2, st_is_valid(padus2)),
fixed
)
padus2 <- bind_rows(
filter(padus2, st_is_valid(padus2)),
fixed
)
any(sf::st_is_valid(padus2) == FALSE)
p <- file.path('..', 'data', 'geospatial', 'DOIadministered', 'DOIterrestrial.gpkg')
padus <- st_read(file.path(p), quiet = TRUE) |>
# we are dealing with areas over significant curvature of the earth
# and many high latitude areas so will need to calculate our areas on
# the geoid
sf::st_transform(4326)
# when we do this we find out some of our geometries have a problem...
indx <- st_is_valid(padus)
which(indx==FALSE)
# notice we have a ton of multipolygons, what we will find is that it's
# usually a single polygon within these objects which is the problem
invalid <- padus[which(indx == FALSE),]
padus <- padus[which(indx == TRUE),]
# most of these can actually be fixed.
invalid_fixed <- sf::st_make_valid(invalid)
# however 1 remains problematic, we will cast the multi* to polygons
# and re-union those.
invalid_fixed_problem <- invalid_fixed[!sf::st_is_valid(invalid_fixed),]
invalid_fixed_problem <- sf::st_cast(invalid_fixed_problem, 'POLYGON')
iso_fix_pro <- sf::st_union(invalid_fixed_problem)
# now we can combine these problem data geometries which we have fixed.
iso_fix_pro <- bind_cols(
sf::st_drop_geometry(invalid_fixed_problem)[1,],
geom = iso_fix_pro
)
rm(invalid_fixed_problem)
# this contains out readily fixed invalid geometry, and our final sticky geometry.
isolated_fixed_problem <- bind_rows(invalid_fixed, iso_fix_pro)
# now we can add them back to the geometries which were valid
fixed <- bind_rows(
invalid_fixed,
isolated_fixed_problem
)
fixed <- st_make_valid(fixed)
rm(invalid_fixed, isolated_fixed_problem, iso_fix_pro)
# and finally combie all the data back together as one valid data set.
padus2 <- bind_rows(
padus,
fixed
)
# test again to see if any records remain invalid.
any(sf::st_is_valid(padus2) == FALSE)
wtf <- filter(padus2, !st_is_valid(padus2))
wtf <- st_cast(wtf, 'POLYGON') |>
mutate(geom = st_union(geom)) |>
distinct()
padus2 <- bind_rows(
filter(padus2, st_is_valid(padus2)),
wtf
)
any(sf::st_is_valid(padus2) == FALSE)
any(sf::st_is_valid(padus2) == FALSE)
areas <- sf::st_area(padus2)
areas2 <- data.frame(
st_drop_geometry(padus2),
Area = units::set_units(sf::st_area(padus2), ha)
) |>
group_by(Mang_Name) |>
summarize(Total = sum(Area))
areas2
prettyNum(98087911.19 * 2.471051565, ',')
areas2
prettyNum(80867463.16*2.471051565, ',')
areas2
prettyNum(31089741.23*2.471051565, ',')
p <- file.path('..', 'data', 'geospatial', 'DOIadministered', 'DOIterrestrial.gpkg')
padus <- st_read(file.path(p), quiet = TRUE) |>
# we are dealing with areas over significant curvature of the earth
# and many high latitude areas so will need to calculate our areas on
# the geoid
sf::st_transform(4326)
library(sf)
library(tidyverse)
qgis_calc <- st_read('calced.gpkg', quiet = TRUE)|>
group_by(Mang_Name) |>
summarize(Total = sum(area))
